---
export interface Props {
  enterColor?: string;
}
const { enterColor } = Astro.props;
---

<div
  id="transition-mask"
  class:list={[
    "fixed",
    "inset-0",
    "z-[999]",
    "pointer-events-none",
    enterColor === "white" ? "bg-white" : "bg-black",
  ]}
>
</div>

<script>
  import gsap from "gsap";

  function initTransitionMask() {
    const mask = document.getElementById("transition-mask") as HTMLDivElement;

    const slideIn = (pageColor: string) =>
      new Promise((resolve) => {
        gsap
          .timeline()
          .to(mask, {
            y: 0,
            duration: 1,
            ease: "power2.inOut",
            onStart: () => mask?.classList.remove("pointer-events-none"),
          })
          .to(mask, {
            duration: 0.5,
            backgroundColor: pageColor,
            onComplete: resolve,
          });
      });

    const slideOut = () =>
      new Promise<void>((resolve) => {
        gsap.to(mask, {
          y: "-100%",
          duration: 1,
          ease: "power2.inOut",
          onStart: () => mask?.classList.remove("pointer-events-none"),
        });
        resolve();
      });

    document.querySelectorAll("a[href]:not(.video-item)").forEach((link) => {
      const anchor = link as HTMLAnchorElement;
      const url = new URL(anchor.href);
      const isSameOrigin = location.origin === url.origin;
      const pageColor = anchor.dataset.pageColor || "black";

      if (!isSameOrigin || anchor.target === "_blank") return;

      anchor.addEventListener("click", async (e) => {
        e.preventDefault();
        const href = anchor.href;
        await slideIn(pageColor);
        window.location.href = href;
      });
    });

    // si es home o video, no hacer slide out
    if (location.pathname === "/" || location.pathname.startsWith("/video/")) {
      mask.style.transform = "translateY(-100%)";
      return;
    }
    slideOut();
  }

  initTransitionMask();
  document.addEventListener("astro:after-swap", initTransitionMask);
</script>
