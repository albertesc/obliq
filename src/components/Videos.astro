---
import type { Video } from "@/types/videos";
import VideoItem from "./organisms/VideoItem.astro";
import data from "@/data/videos.json";

const videos: Video[] = data.videos;
---

<section class="pb-16" id="videos">
  <div class="container mx-auto px-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {videos.map((video: Video) => <VideoItem video={video} />)}
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  function initVideoAnimations() {
    const videoItems = document.querySelectorAll(".video-item");
    const videoSection = document.getElementById("videos");

    gsap.from(videoItems, {
      opacity: 0,
      y: 30,
      duration: 0.2,
      ease: "power2.out",
      stagger: 0.1,
      scrollTrigger: {
        trigger: videoSection,
        start: "-=100 center",
        end: "center -=200",
        toggleActions: "play reverse play reverse",
        scrub: 0.5,
      },
    });
  }

  function initCursorBehavior() {
    const cursor = document.getElementById("customCursor")!;
    const targets = document.querySelectorAll(".custom-cursor-target");
    const CURSOR_HALF = 75 / 2;

    let pendingX = 0;
    let pendingY = 0;
    let rafId: number | null = null;
    let hideTimeout: number | null = null;
    let showTimeout: number | null = null;

    function updatePosition() {
      gsap.set(cursor, {
        x: pendingX - CURSOR_HALF,
        y: pendingY - CURSOR_HALF,
      });
      rafId = null;
    }

    function onMove(e: Event) {
      const mouseEvent = e as MouseEvent;
      pendingX = mouseEvent.clientX;
      pendingY = mouseEvent.clientY;
      if (!rafId) rafId = requestAnimationFrame(updatePosition);
    }

    function animateShowCursor() {
      gsap.killTweensOf(cursor);
      gsap.to(cursor, {
        scale: 1,
        duration: 0.2,
        ease: "power3.out",
      });
    }

    function animateHideCursor() {
      gsap.killTweensOf(cursor);
      gsap.to(cursor, {
        scale: 0,
        duration: 0.2,
        ease: "power3.inOut",
      });
    }

    function onPointerEnter() {
      if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
      }

      showTimeout = window.setTimeout(() => {
        animateShowCursor();
        showTimeout = null;
      }, 100); // Delay en mostrar el cursor
    }

    function onPointerLeave() {
      if (showTimeout) {
        clearTimeout(showTimeout);
        showTimeout = null;
      }

      if (hideTimeout) return;

      hideTimeout = window.setTimeout(() => {
        animateHideCursor();
        hideTimeout = null;
      }, 50);
    }

    document.addEventListener("pointermove", onMove);

    targets.forEach((target) => {
      (target as HTMLElement).style.cursor = "none";
      target.addEventListener("pointerenter", onPointerEnter);
      target.addEventListener("pointerleave", onPointerLeave);
    });
  }

  initVideoAnimations();
  initCursorBehavior();

  document.addEventListener("astro:after-swap", () => {
    initVideoAnimations();
    initCursorBehavior();
  });
</script>
